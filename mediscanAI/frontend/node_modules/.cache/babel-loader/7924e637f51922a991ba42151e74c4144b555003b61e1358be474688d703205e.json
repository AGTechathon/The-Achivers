{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback, useRef } from 'react';\nexport const useSpeech = () => {\n  _s();\n  const [isEnabled, setIsEnabled] = useState(true);\n  const speechRef = useRef(null);\n  const speak = useCallback(text => {\n    if (!isEnabled || !window.speechSynthesis) return;\n\n    // Cancel any ongoing speech\n    window.speechSynthesis.cancel();\n\n    // Create new utterance\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.rate = 0.9;\n    utterance.pitch = 1;\n    utterance.volume = 1;\n    utterance.lang = 'en-US';\n\n    // Store reference to current utterance\n    speechRef.current = utterance;\n\n    // Speak\n    window.speechSynthesis.speak(utterance);\n  }, [isEnabled]);\n  const stop = useCallback(() => {\n    window.speechSynthesis.cancel();\n    speechRef.current = null;\n  }, []);\n  const toggleEnabled = useCallback(() => {\n    setIsEnabled(prev => {\n      if (prev) {\n        stop();\n      }\n      return !prev;\n    });\n  }, [stop]);\n  return {\n    speak,\n    stop,\n    isEnabled,\n    toggleEnabled\n  };\n};\n_s(useSpeech, \"2P9UwufXV9a2GDp/6+Oo05JreFU=\");","map":{"version":3,"names":["useState","useCallback","useRef","useSpeech","_s","isEnabled","setIsEnabled","speechRef","speak","text","window","speechSynthesis","cancel","utterance","SpeechSynthesisUtterance","rate","pitch","volume","lang","current","stop","toggleEnabled","prev"],"sources":["C:/Users/smutk/OneDrive/Documents/hackethon/The-Achivers/mediscanAI/frontend/src/hooks/useSpeech.ts"],"sourcesContent":["import { useState, useCallback, useRef } from 'react';\r\n\r\nexport const useSpeech = () => {\r\n  const [isEnabled, setIsEnabled] = useState(true);\r\n  const speechRef = useRef<SpeechSynthesisUtterance | null>(null);\r\n\r\n  const speak = useCallback((text: string) => {\r\n    if (!isEnabled || !window.speechSynthesis) return;\r\n\r\n    // Cancel any ongoing speech\r\n    window.speechSynthesis.cancel();\r\n\r\n    // Create new utterance\r\n    const utterance = new SpeechSynthesisUtterance(text);\r\n    utterance.rate = 0.9;\r\n    utterance.pitch = 1;\r\n    utterance.volume = 1;\r\n    utterance.lang = 'en-US';\r\n\r\n    // Store reference to current utterance\r\n    speechRef.current = utterance;\r\n\r\n    // Speak\r\n    window.speechSynthesis.speak(utterance);\r\n  }, [isEnabled]);\r\n\r\n  const stop = useCallback(() => {\r\n    window.speechSynthesis.cancel();\r\n    speechRef.current = null;\r\n  }, []);\r\n\r\n  const toggleEnabled = useCallback(() => {\r\n    setIsEnabled(prev => {\r\n      if (prev) {\r\n        stop();\r\n      }\r\n      return !prev;\r\n    });\r\n  }, [stop]);\r\n\r\n  return {\r\n    speak,\r\n    stop,\r\n    isEnabled,\r\n    toggleEnabled\r\n  };\r\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,EAAEC,MAAM,QAAQ,OAAO;AAErD,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAMO,SAAS,GAAGL,MAAM,CAAkC,IAAI,CAAC;EAE/D,MAAMM,KAAK,GAAGP,WAAW,CAAEQ,IAAY,IAAK;IAC1C,IAAI,CAACJ,SAAS,IAAI,CAACK,MAAM,CAACC,eAAe,EAAE;;IAE3C;IACAD,MAAM,CAACC,eAAe,CAACC,MAAM,CAAC,CAAC;;IAE/B;IACA,MAAMC,SAAS,GAAG,IAAIC,wBAAwB,CAACL,IAAI,CAAC;IACpDI,SAAS,CAACE,IAAI,GAAG,GAAG;IACpBF,SAAS,CAACG,KAAK,GAAG,CAAC;IACnBH,SAAS,CAACI,MAAM,GAAG,CAAC;IACpBJ,SAAS,CAACK,IAAI,GAAG,OAAO;;IAExB;IACAX,SAAS,CAACY,OAAO,GAAGN,SAAS;;IAE7B;IACAH,MAAM,CAACC,eAAe,CAACH,KAAK,CAACK,SAAS,CAAC;EACzC,CAAC,EAAE,CAACR,SAAS,CAAC,CAAC;EAEf,MAAMe,IAAI,GAAGnB,WAAW,CAAC,MAAM;IAC7BS,MAAM,CAACC,eAAe,CAACC,MAAM,CAAC,CAAC;IAC/BL,SAAS,CAACY,OAAO,GAAG,IAAI;EAC1B,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,aAAa,GAAGpB,WAAW,CAAC,MAAM;IACtCK,YAAY,CAACgB,IAAI,IAAI;MACnB,IAAIA,IAAI,EAAE;QACRF,IAAI,CAAC,CAAC;MACR;MACA,OAAO,CAACE,IAAI;IACd,CAAC,CAAC;EACJ,CAAC,EAAE,CAACF,IAAI,CAAC,CAAC;EAEV,OAAO;IACLZ,KAAK;IACLY,IAAI;IACJf,SAAS;IACTgB;EACF,CAAC;AACH,CAAC;AAACjB,EAAA,CA5CWD,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}